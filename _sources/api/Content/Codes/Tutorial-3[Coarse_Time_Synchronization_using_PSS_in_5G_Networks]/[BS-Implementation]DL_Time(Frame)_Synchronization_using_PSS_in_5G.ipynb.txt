{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b170f754",
   "metadata": {},
   "source": [
    "# BS Side Implementation-Downlink Time/Frame Synchronization using PSS in 5G Networks\n",
    "\n",
    "Downlink time/frame synchronization using Primary Synchronization Signal (PSS) in 5G networks is a vital procedure for ensuring precise timing alignment between the base station (gNB) and user equipment (UE). Here's a more accurate breakdown:\n",
    "\n",
    "1. **Purpose of Synchronization**: Synchronization is crucial for coordinating transmission and reception in wireless networks. In the downlink direction, precise synchronization ensures that UEs can correctly receive and decode the transmitted signals from the base station.\n",
    "2. **Primary Synchronization Signal (PSS)**: PSS is a specific signal transmitted periodically by the base station. It consists of unique sequences known as primary synchronization sequences, which convey critical information such as cell identity and timing.\n",
    "3. **UE Synchronization Process**: When a UE attempts to connect to a 5G network, it scans for nearby cells and detects PSS signals. By decoding the PSS, the UE identifies the cell's identity and estimates the timing offset between its internal clock and the base station's clock.\n",
    "4. **Frame Synchronization**: Alongside time synchronization, frame synchronization ensures that the UE accurately identifies the boundaries of radio frames transmitted by the base station. This synchronization is essential for proper reception and processing of control and data information within each frame.\n",
    "5. **Accurate Resource Allocation**: Precise time/frame synchronization enables efficient resource allocation by the base station. Aligned UEs allow optimal utilization of available resources, enhancing system capacity and throughput.\n",
    "6. **Benefits and Impact**: Accurate downlink synchronization using PSS enhances overall network performance by improving reception quality, facilitating seamless handovers, and enabling efficient resource management. It ensures robust connectivity and enhances the user experience in 5G networks.\n",
    "\n",
    "In summary, downlink time/frame synchronization using PSS is critical for ensuring reliable and efficient communication in 5G networks, providing precise timing alignment between base stations and user devices for seamless operation and optimal performance.\n",
    "\n",
    "\n",
    "## 3.1 Import Libraries\n",
    "\n",
    "### 3.1 Import Some Basic Python Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "08ef5870",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# from IPython.display import display, HTML\n",
    "# display(HTML(\"<style>.container { width:90% !important; }</style>\"))\n",
    "\n",
    "import os\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n",
    "\n",
    "# %matplotlib widget\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as patches\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "import numpy as np\n",
    "import adi\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eec54900",
   "metadata": {},
   "source": [
    "### 3.1 Import 5G Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2881ccf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from toolkit5G.SequenceGeneration import PSS, SSS, DMRS\n",
    "from toolkit5G.PhysicalChannels   import PBCH, PBCHDecoder\n",
    "from toolkit5G.ResourceMapping    import SSB_Grid, ResourceMapperSSB\n",
    "from toolkit5G.OFDM               import OFDMModulator, OFDMDemodulator\n",
    "from toolkit5G.MIMOProcessing     import AnalogBeamforming, ReceiveCombining\n",
    "from toolkit5G.ReceiverAlgorithms import PSSDetection, SSSDetection, ChannelEstimationAndEqualization, DMRSParameterDetection\n",
    "from toolkit5G.Configurations     import TimeFrequency5GParameters, GenerateValidSSBParameters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f60b60a",
   "metadata": {},
   "source": [
    "## 3.1 Emulation Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3d7321cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# System Parameters\n",
    "center_frequency    = 1e9     # Carrier frequency for signal transmission\n",
    "\n",
    "# OFDM Parameters\n",
    "Bandwidth           = 5*10**6 # bandwidth\n",
    "fftSize             = 1024    # FFT-size for OFDM\n",
    "subcarrier_spacing  = 15000   # Subcarrier spacing\n",
    "numOFDMSymbols      = 14      # Number of OFDM symbols considered for emulation | 1 slot\n",
    "sample_rate         = fftSize*subcarrier_spacing # sample rate required by OFDM and DAC/ADC of SDR\n",
    "\n",
    "# Pulse Shaping\n",
    "numSamplesPerSymbol = 1\n",
    "\n",
    "\n",
    "# number of samples returned per call to rx()\n",
    "buffer_size         = int(fftSize*1.2*numSamplesPerSymbol*numOFDMSymbols)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f966517",
   "metadata": {},
   "source": [
    "## 3.1 Generate SSB Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "575e4c58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## This class fetches valid set of 5G parameters for the system configurations\n",
    "nSymbolFrame= int(140*subcarrier_spacing/15000)\n",
    "## This class fetches valid set of 5G parameters for the system configurations \n",
    "tfParams    = TimeFrequency5GParameters(Bandwidth, subcarrier_spacing)\n",
    "tfParams(nSymbolFrame, typeCP = \"normal\")\n",
    "nRB         = tfParams.numRBs        # SSB Grid size (Number of RBs considered for SSB transition)\n",
    "Neff        = tfParams.Neff        # Number of resource blocks for Resource Grid ( exclude gaurd band | offsets : BWP)\n",
    "Nfft        = 512                 # FFT-size for OFDM\n",
    "lengthCP    = tfParams.lengthCP    # CP length\n",
    "#___________________________________________________________________\n",
    "\n",
    "#### Generate MIB Information\n",
    "lamda                           = 3e8/center_frequency;\n",
    "nSCSOffset                      = 1\n",
    "ssbParameters                   = GenerateValidSSBParameters(center_frequency, nSCSOffset, \"caseA\", ssbSubCarrierOffset = np.array([0]))\n",
    "\n",
    "systemFrameNumber               = ssbParameters.systemFrameNumber\n",
    "subCarrierSpacingCommon         = subcarrier_spacing\n",
    "ssbSubCarrierOffset             = ssbParameters.ssbSubCarrierOffset\n",
    "DMRSTypeAPosition               = ssbParameters.DMRSTypeAPosition\n",
    "controlResourceSet0             = ssbParameters.controlResourceSet0\n",
    "searchSpace0                    = ssbParameters.searchSpace0\n",
    "\n",
    "isPairedBand                    = ssbParameters.isPairedBand\n",
    "nSCSOffset                      = ssbParameters.nSCSOffset\n",
    "choiceBit                       = ssbParameters.choiceBit\n",
    "ssbType                         = ssbParameters.ssbType\n",
    "nssbCandidatesInHrf             = ssbParameters.nssbCandidatesInHrf\n",
    "ssbIndex                        = ssbParameters.ssbIndex\n",
    "hrfBit                          = ssbParameters.hrfBit\n",
    "cellBarred                      = ssbParameters.cellBarred\n",
    "intraFrequencyReselection       = ssbParameters.intraFrequencyReselection\n",
    "withSharedSpectrumChannelAccess = ssbParameters.withSharedSpectrumChannelAccess\n",
    "\n",
    "Nsc_ssb                         = 240\n",
    "Nsymb_ssb                       = 4\n",
    "#_______________________________________\n",
    "\n",
    "\n",
    "N_ID2        = np.random.randint(3)\n",
    "\n",
    "# Generate PSS sequence\n",
    "pssObject    = PSS(N_ID2);\n",
    "pssSequence  = pssObject()\n",
    "\n",
    "N_ID1        = np.random.randint(336)\n",
    "N_ID         = 3*N_ID1 + N_ID2\n",
    "\n",
    "# Generate SSS sequence\n",
    "sssObject    = SSS(N_ID1, N_ID2);\n",
    "sssSequence  = sssObject()\n",
    "\n",
    "# Generate DMRS sequence\n",
    "dmrsLen      = 144;\n",
    "dmrsObject   = DMRS(\"PBCH\", N_ID, ssbIndex, nssbCandidatesInHrf, hrfBit)\n",
    "# dmrsSeq = dmrs.getSequence(\"tensorflow\")\n",
    "dmrsSequence = dmrsObject(dmrsLen)\n",
    "\n",
    "\n",
    "# Generate PBCH symbols\n",
    "pbchObject   = PBCH(center_frequency, choiceBit, subCarrierSpacingCommon, DMRSTypeAPosition,\n",
    "                   controlResourceSet0, searchSpace0, cellBarred, intraFrequencyReselection,\n",
    "                   systemFrameNumber, ssbSubCarrierOffset, hrfBit, ssbIndex, N_ID,\n",
    "                   nssbCandidatesInHrf)\n",
    "\n",
    "pbchSymbols  = pbchObject()\n",
    "\n",
    "## Generate SSB Object\n",
    "ssbObject    = SSB_Grid(N_ID, True)\n",
    "ssb          = ssbObject(pssSequence, sssSequence, dmrsSequence, pbchSymbols)\n",
    "\n",
    "## Loading SSB to Resource Grid\n",
    "#####################################\n",
    "# ssbPositionInBurst = np.ones(nssbCandidatesInHrf, dtype=int)\n",
    "ssbPositionInBurst    = np.zeros(nssbCandidatesInHrf, dtype=int)\n",
    "ssbPositionInBurst[0] = 1\n",
    "\n",
    "ssbRGobject    = ResourceMapperSSB(ssbType=ssbType, carrierFrequency = center_frequency, \n",
    "                                   isPairedBand = isPairedBand, \n",
    "                                   withSharedSpectrumChannelAccess = withSharedSpectrumChannelAccess)\n",
    "\n",
    "ssbGrid = ssbRGobject(ssb[0], ssbPositionInBurst, offsetInSubcarriers = ssbSubCarrierOffset[0],\n",
    "                      offsetInRBs = 0, numRBs = nRB)[0:14]\n",
    "fig, ax = ssbObject.displayGrid(option=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b9f84f9",
   "metadata": {},
   "source": [
    "## 3.1 Construct Transmission Grid and Generate Time Domain Samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03b6f3bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Loading SSB to Resource Grid\n",
    "numofGuardCarriers = (int((fftSize - Neff)/2), int((fftSize - Neff)/2))\n",
    "offsetToPointA     = 0\n",
    "firstSCIndex       = int(numofGuardCarriers[0] + offsetToPointA)\n",
    "numOFDMSymbols     = ssbGrid.shape[0]\n",
    "\n",
    "X = np.zeros((numOFDMSymbols, fftSize), dtype= np.complex64)\n",
    "X[:, firstSCIndex:firstSCIndex+ssbGrid.shape[-1]] = ssbGrid\n",
    "\n",
    "#__________________________________________________\n",
    "\n",
    "## OFDM Modulation at Transmitter\n",
    "#####################################\n",
    "modulator = OFDMModulator(lengthCP[1])\n",
    "x_time    = modulator(X).flatten()\n",
    "#______________________________________________________\n",
    "\n",
    "# Plot Resource Grid\n",
    "#################################################################\n",
    "fig, ax = plt.subplots()\n",
    "plt.imshow(np.abs(X), cmap = 'hot', interpolation='nearest', aspect = \"auto\")\n",
    "ax = plt.gca();\n",
    "ax.grid(color='c', linestyle='-', linewidth=1)\n",
    "ax.set_xlabel(\"Subcarrier-Index (k)\")\n",
    "ax.set_ylabel(\"OFDM Symbol Index (n)\")\n",
    "ax.set_title(\"Heat map of Transmit Grid\")\n",
    "# Gridlines based on minor ticks\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3a644e5",
   "metadata": {},
   "source": [
    "## 3.1 SDR-Setup Configurations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3cdf41f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# SDR setup\n",
    "sdr             = adi.Pluto(\"ip:192.168.2.1\")       # Create object of SDR setup object and configure the IP of SDR connect to the system\n",
    "sdr.sample_rate = int(sample_rate)                  # Sets the sample rate for the ADC/DAC of the SDR.\n",
    "\n",
    "# Config Tx\n",
    "sdr.tx_rf_bandwidth         = int(sample_rate)      # Set the bandwidth of the transmit filter | Can be set same as the sample rate\n",
    "# For Pluto SDR, tx_rf_bandwidth should be between 200 kHz and 56 MHz.\n",
    "sdr.tx_lo                   = int(center_frequency) # Sets the transmitter local oscillator frequency. The carrier is used to modulate/up-convert the analog information signal.\n",
    "# For Pluto SDR, tx_lo can take a value between 325 MHz to 3.8 GHz.\n",
    "sdr.tx_hardwaregain_chan0   = 0                     # Sets the gain (dB) of the transmitter power amplifier. The higher the value the more the power radiated by antenna. \n",
    "# For Pluto SDR, tx_hardwaregain_chan0 can take values between -90 to 0.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "135533ad",
   "metadata": {},
   "source": [
    "## 3.1 Transmission: SDR RF Transmitter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "563549d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Start the transmitter\n",
    "sdr.tx_cyclic_buffer = True # Enable cyclic buffers\n",
    "# sdr.tx_cyclic_buffer = False # Enable cyclic buffers\n",
    "sdr.tx(1.3*2**17*(x_time.repeat(1))) # start transmitting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "faa3e3be-ff50-4e5c-879e-c291a5b87d7d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
